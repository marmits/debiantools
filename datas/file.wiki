La syntaxe que vous montrez dans votre fichier <code>docker-compose.yml</code> concerne la gestion des '''volumes nommés''' dans Docker. Voici ce qu’il faut comprendre :

<span id="intérêt-de-cette-syntaxe-volumes-nommés"></span>
=== Intérêt de cette syntaxe (volumes nommés) : ===

# '''Persistance des données''' : Les volumes nommés (<code>vendor</code>, <code>var</code>, <code>nodeModule</code>) permettent de conserver les données même après la suppression du conteneur.
# '''Partage entre conteneurs''' : Ces volumes peuvent être partagés entre plusieurs services (utile par exemple pour partager des dépendances comme <code>node_modules</code> ou <code>vendor</code> entre plusieurs conteneurs).
# '''Performances''' : Sur certains systèmes (comme macOS/Windows avec Docker Desktop), monter des volumes pour des dossiers comme <code>node_modules</code> ou <code>vendor</code> améliore les performances (évite les problèmes de synchronisation de fichiers avec les mounts bind classiques).

<span id="que-se-passe-t-il-si-vous-supprimez-la-partie-sous-declaration-b"></span>
=== Que se passe-t-il si vous supprimez la partie sous <code># declaration b</code> ? ===

* '''Les volumes nommés ne seront pas créés''' : Docker essaiera de monter les volumes (<code>nodeModule</code>, <code>vendor</code>, <code>var</code>), mais comme ils ne sont pas déclarés dans la section <code>volumes:</code> racine, Docker les traitera comme des '''montages anonymes''' (volumes temporaires avec un nom généré aléatoirement).
* '''Comportement différent au redémarrage''' :
* Avec la déclaration : Les données persistent et sont réutilisées.
* Sans la déclaration : Un nouveau volume anonyme est créé à chaque démarrage, et les données précédentes sont perdues (sauf si Docker réutilise un volume anonyme existant, mais ce n’est pas garanti).

<span id="exemple-concret"></span>
=== Exemple concret : ===

Si vous avez ceci :

<syntaxhighlight lang="yaml">services:
 app:
 volumes:
 - nodeModule:/var/www/node_modules

# Sans cette partie :
# volumes:
# nodeModule:</syntaxhighlight>
* Au premier <code>docker-compose up</code>, Docker créera un volume anonyme pour <code>nodeModule</code>.
* Si vous supprimez le conteneur et relancez, un '''nouveau''' volume anonyme sera créé, et vos <code>node_modules</code> précédents seront perdus.

<span id="conclusion"></span>
=== Conclusion : ===

La section <code>volumes:</code> racine est '''nécessaire''' si vous voulez : - Des volumes persistants et réutilisables. - Pouvoir gérer ces volumes via <code>docker volume ls</code> / <code>docker volume inspect</code>. - Éviter la duplication de données ou les pertes entre les redémarrages.

Vous pouvez aussi utiliser des '''montages bind''' (chemins absolus) si vous n’avez pas besoin de volumes Docker managés :

<syntaxhighlight lang="yaml">services:
 app:
 volumes:
 - ./node_modules:/var/www/node_modules # Montage bind (dossier local)</syntaxhighlight>
Mais cela peut causer des problèmes de performances/permissions dans certains cas.
